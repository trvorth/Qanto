name: Deploy Qanto Website

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'website/**'
      - '.github/workflows/deploy-website.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'website/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging
      force_deploy:
        description: 'Force deployment (skip checks)'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '18'
  WEBSITE_DIR: 'website'
  ARTIFACT_NAME: 'qanto-website'
  DEPLOYMENT_TIMEOUT: 300

jobs:
  # Validation and Testing
  validate:
    name: Validate Website
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: '${{ env.WEBSITE_DIR }}/package-lock.json'
      
      - name: Install dependencies
        working-directory: ${{ env.WEBSITE_DIR }}
        run: |
          npm ci --only=production
          npm install -g html-validate css-tree-validator eslint
      
      - name: Validate HTML
        working-directory: ${{ env.WEBSITE_DIR }}
        run: |
          echo "Validating HTML files..."
          find . -name "*.html" -exec html-validate {} \;
      
      - name: Validate CSS
        working-directory: ${{ env.WEBSITE_DIR }}
        run: |
          echo "Validating CSS files..."
          find assets/css -name "*.css" -exec css-tree-validator {} \;
      
      - name: Lint JavaScript
        working-directory: ${{ env.WEBSITE_DIR }}
        run: |
          echo "Linting JavaScript files..."
          find assets/js -name "*.js" -exec eslint {} \;
      
      - name: Validate JSON files
        working-directory: ${{ env.WEBSITE_DIR }}
        run: |
          echo "Validating JSON files..."
          find . -name "*.json" -exec python -m json.tool {} \; > /dev/null
      
      - name: Check file sizes
        working-directory: ${{ env.WEBSITE_DIR }}
        run: |
          echo "Checking file sizes..."
          find . -type f -size +1M -exec ls -lh {} \; | awk '{print $9 ": " $5}'
          
          # Fail if any single file is larger than 5MB
          if find . -type f -size +5M | grep -q .; then
            echo "Error: Files larger than 5MB found"
            find . -type f -size +5M -exec ls -lh {} \;
            exit 1
          fi
      
      - name: Security scan
        working-directory: ${{ env.WEBSITE_DIR }}
        run: |
          echo "Running security scan..."
          # Check for potential security issues
          if grep -r "eval(" assets/js/ || grep -r "innerHTML" assets/js/ || grep -r "document.write" assets/js/; then
            echo "Warning: Potential security issues found in JavaScript"
          fi
          
          # Check for exposed sensitive data
          if grep -r "password\|secret\|key\|token" . --exclude-dir=.git --exclude="*.yml" --exclude="*.md"; then
            echo "Warning: Potential sensitive data found"
          fi
      
      - name: Performance audit
        working-directory: ${{ env.WEBSITE_DIR }}
        run: |
          echo "Running performance audit..."
          npm install -g lighthouse-ci
          
          # Create temporary server for testing
          python3 -m http.server 8080 &
          SERVER_PID=$!
          sleep 5
          
          # Run Lighthouse CI
          lhci autorun --upload.target=temporary-public-storage || true
          
          # Cleanup
          kill $SERVER_PID

  # Build and Optimize
  build:
    name: Build Website
    runs-on: ubuntu-latest
    needs: [validate]
    if: always() && (needs.validate.result == 'success' || github.event.inputs.force_deploy == 'true')
    
    strategy:
      matrix:
        environment: [production, staging]
        exclude:
          - environment: ${{ github.event_name == 'pull_request' && 'production' || 'staging' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Install build tools
        run: |
          npm install -g terser clean-css-cli html-minifier-terser imagemin-cli
      
      - name: Create build directory
        run: |
          mkdir -p build/${{ matrix.environment }}
          cp -r ${{ env.WEBSITE_DIR }}/* build/${{ matrix.environment }}/
      
      - name: Process HTML files
        working-directory: build/${{ matrix.environment }}
        run: |
          echo "Processing HTML files..."
          find . -name "*.html" -exec html-minifier-terser \
            --collapse-whitespace \
            --remove-comments \
            --remove-optional-tags \
            --remove-redundant-attributes \
            --remove-script-type-attributes \
            --remove-tag-whitespace \
            --use-short-doctype \
            --minify-css true \
            --minify-js true \
            --output {} {} \;
      
      - name: Optimize CSS
        working-directory: build/${{ matrix.environment }}
        run: |
          echo "Optimizing CSS files..."
          find assets/css -name "*.css" -exec cleancss -o {} {} \;
      
      - name: Optimize JavaScript
        working-directory: build/${{ matrix.environment }}
        run: |
          echo "Optimizing JavaScript files..."
          find assets/js -name "*.js" -exec terser {} -o {} --compress --mangle \;
      
      - name: Optimize images
        working-directory: build/${{ matrix.environment }}
        run: |
          echo "Optimizing images..."
          if [ -d "assets/images" ]; then
            find assets/images -name "*.png" -exec imagemin {} --out-dir=assets/images --plugin=imagemin-pngquant \;
            find assets/images -name "*.jpg" -o -name "*.jpeg" -exec imagemin {} --out-dir=assets/images --plugin=imagemin-mozjpeg \;
            find assets/images -name "*.svg" -exec imagemin {} --out-dir=assets/images --plugin=imagemin-svgo \;
          fi
      
      - name: Generate service worker cache manifest
        working-directory: build/${{ matrix.environment }}
        run: |
          echo "Generating cache manifest..."
          cat > cache-manifest.json << EOF
          {
            "version": "$(date +%s)",
            "files": [
          $(find . -type f \( -name "*.html" -o -name "*.css" -o -name "*.js" -o -name "*.png" -o -name "*.jpg" -o -name "*.svg" \) | sed 's/^\.//' | sed 's/.*$/"&",/' | sed '$ s/,$//')
            ]
          }
          EOF
      
      - name: Create deployment manifest
        working-directory: build/${{ matrix.environment }}
        run: |
          cat > deployment-manifest.json << EOF
          {
            "version": "${{ github.sha }}",
            "environment": "${{ matrix.environment }}",
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "branch": "${{ github.ref_name }}",
            "commit": "${{ github.sha }}",
            "actor": "${{ github.actor }}",
            "workflow": "${{ github.workflow }}",
            "run_id": "${{ github.run_id }}",
            "files": {
              "total": $(find . -type f | wc -l),
              "size": "$(du -sh . | cut -f1)"
            }
          }
          EOF
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}-${{ matrix.environment }}
          path: build/${{ matrix.environment }}
          retention-days: 30
          compression-level: 9

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build]
    if: |
      always() && 
      needs.build.result == 'success' && 
      (github.ref == 'refs/heads/main' || github.event.inputs.environment == 'production') &&
      github.event_name != 'pull_request'
    
    environment:
      name: production
      url: https://qanto.network
    
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}-production
          path: ./website
      
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.PRODUCTION_SSH_KEY }}
      
      - name: Add server to known hosts
        run: |
          ssh-keyscan -H ${{ secrets.PRODUCTION_HOST }} >> ~/.ssh/known_hosts
      
      - name: Deploy to production server
        run: |
          echo "Deploying to production server..."
          
          # Create deployment directory with timestamp
          DEPLOY_DIR="/var/www/qanto.network/releases/$(date +%Y%m%d_%H%M%S)"
          
          # Create directory and upload files
          ssh ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }} "mkdir -p $DEPLOY_DIR"
          scp -r website/* ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }}:$DEPLOY_DIR/
          
          # Update symlink and restart services
          ssh ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }} << 'EOF'
            # Backup current deployment
            if [ -L "/var/www/qanto.network/current" ]; then
              BACKUP_DIR="/var/www/qanto.network/backup/$(date +%Y%m%d_%H%M%S)"
              mkdir -p "$BACKUP_DIR"
              cp -r $(readlink /var/www/qanto.network/current)/* "$BACKUP_DIR/"
            fi
            
            # Update symlink
            ln -sfn "$DEPLOY_DIR" /var/www/qanto.network/current
            
            # Set permissions
            chown -R www-data:www-data /var/www/qanto.network/current
            chmod -R 755 /var/www/qanto.network/current
            
            # Reload nginx
            sudo systemctl reload nginx
            
            # Clean old releases (keep last 5)
            cd /var/www/qanto.network/releases
            ls -t | tail -n +6 | xargs rm -rf
          EOF
      
      - name: Health check
        run: |
          echo "Performing health check..."
          
          # Wait for deployment to be ready
          sleep 30
          
          # Check if site is accessible
          for i in {1..5}; do
            if curl -f -s -o /dev/null https://qanto.network; then
              echo "✅ Health check passed"
              break
            else
              echo "❌ Health check failed (attempt $i/5)"
              if [ $i -eq 5 ]; then
                echo "Health check failed after 5 attempts"
                exit 1
              fi
              sleep 10
            fi
          done
      
      - name: Update CDN cache
        run: |
          echo "Updating CDN cache..."
          # Purge Cloudflare cache if configured
          if [ -n "${{ secrets.CLOUDFLARE_API_TOKEN }}" ]; then
            curl -X POST "https://api.cloudflare.com/client/v4/zones/${{ secrets.CLOUDFLARE_ZONE_ID }}/purge_cache" \
              -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
              -H "Content-Type: application/json" \
              --data '{"purge_everything":true}'
          fi
      
      - name: Notify deployment success
        if: success()
        run: |
          echo "🚀 Production deployment successful!"
          echo "Site: https://qanto.network"
          echo "Commit: ${{ github.sha }}"
          echo "Actor: ${{ github.actor }}"

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build]
    if: |
      always() && 
      needs.build.result == 'success' && 
      (github.ref == 'refs/heads/develop' || github.event.inputs.environment == 'staging') &&
      github.event_name != 'pull_request'
    
    environment:
      name: staging
      url: https://staging.qanto.network
    
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}-staging
          path: ./website
      
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.STAGING_SSH_KEY }}
      
      - name: Deploy to staging server
        run: |
          echo "Deploying to staging server..."
          
          # Add server to known hosts
          ssh-keyscan -H ${{ secrets.STAGING_HOST }} >> ~/.ssh/known_hosts
          
          # Deploy files
          scp -r website/* ${{ secrets.STAGING_USER }}@${{ secrets.STAGING_HOST }}:/var/www/staging.qanto.network/
          
          # Set permissions and reload nginx
          ssh ${{ secrets.STAGING_USER }}@${{ secrets.STAGING_HOST }} << 'EOF'
            chown -R www-data:www-data /var/www/staging.qanto.network
            chmod -R 755 /var/www/staging.qanto.network
            sudo systemctl reload nginx
          EOF
      
      - name: Staging health check
        run: |
          echo "Performing staging health check..."
          sleep 15
          
          if curl -f -s -o /dev/null https://staging.qanto.network; then
            echo "✅ Staging health check passed"
          else
            echo "❌ Staging health check failed"
            exit 1
          fi

  # Rollback Job (Manual)
  rollback:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'rollback'
    
    steps:
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.PRODUCTION_SSH_KEY }}
      
      - name: Rollback production
        run: |
          echo "Rolling back production deployment..."
          
          ssh ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }} << 'EOF'
            cd /var/www/qanto.network/backup
            LATEST_BACKUP=$(ls -t | head -n 1)
            
            if [ -n "$LATEST_BACKUP" ]; then
              echo "Rolling back to: $LATEST_BACKUP"
              
              # Create new release from backup
              ROLLBACK_DIR="/var/www/qanto.network/releases/rollback_$(date +%Y%m%d_%H%M%S)"
              mkdir -p "$ROLLBACK_DIR"
              cp -r "$LATEST_BACKUP"/* "$ROLLBACK_DIR/"
              
              # Update symlink
              ln -sfn "$ROLLBACK_DIR" /var/www/qanto.network/current
              
              # Set permissions and reload
              chown -R www-data:www-data /var/www/qanto.network/current
              chmod -R 755 /var/www/qanto.network/current
              sudo systemctl reload nginx
              
              echo "Rollback completed successfully"
            else
              echo "No backup found for rollback"
              exit 1
            fi
          EOF
      
      - name: Verify rollback
        run: |
          echo "Verifying rollback..."
          sleep 30
          
          if curl -f -s -o /dev/null https://qanto.network; then
            echo "✅ Rollback verification passed"
          else
            echo "❌ Rollback verification failed"
            exit 1
          fi

  # Cleanup
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-production, deploy-staging]
    if: always()
    
    steps:
      - name: Clean up artifacts
        uses: geekyeggo/delete-artifact@v4
        with:
          name: |
            ${{ env.ARTIFACT_NAME }}-production
            ${{ env.ARTIFACT_NAME }}-staging
          failOnError: false
      
      - name: Summary
        run: |
          echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Actor:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Workflow:** ${{ github.workflow }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Run ID:** ${{ github.run_id }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.deploy-production.result }}" == "success" ]; then
            echo "✅ **Production:** https://qanto.network" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.deploy-staging.result }}" == "success" ]; then
            echo "✅ **Staging:** https://staging.qanto.network" >> $GITHUB_STEP_SUMMARY
          fi