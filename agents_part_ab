
**Docker**:
- The `docker-compose.yml` file indicates that Docker can be used to build and run the `qanto-node` within a containerized environment, simplifying dependency management and deployment.
</dependencies_and_installation>

<testing_instructions>
Testing in this repository is primarily conducted using Rust's built-in testing framework.

**Testing Frameworks**:
- **Rust's `test` module**: Used for writing unit and integration tests.
- **`criterion`**: A development dependency used for benchmarking Rust code.
- **`serial_test`**: A development dependency used to serialize tests, preventing conflicts when tests modify shared resources.

**How to Run Tests**:
- To execute all tests across the entire Rust workspace, navigate to the root directory of the repository and run:
    ```bash
    cargo test --workspace --verbose
    ```
- Individual test functions are typically defined within modules and marked with the `#[test]` attribute. Examples of files containing tests include `src/transaction.rs`, `src/saga.rs`, `src/omega.rs`, `src/node.rs`, `src/integration.rs`, and `src/config.rs`.

**Types of Modules Tested**:
Tests cover a wide range of functionalities, including:
- Core blockchain components: Transaction creation and verification, P2P block propagation, state synchronization, and node initialization.
- AI and Security modules: Functionality of the SAGA AI system and the Omega conscious security layer.
- Configuration management: Ensuring configuration loading, saving, and validation work correctly.

When writing new tests, ensure they are placed in a logical location, typically within the same module as the code they are testing, or in a dedicated `tests/` directory for integration tests if applicable.
</testing_instructions>

<pull_request_formatting>
When submitting pull requests, please adhere to the following guidelines for commit messages and pull request descriptions:

**Git Commit Messages**:
- Use the present tense (e.g., "Add feature" instead of "Added feature").
- Use the imperative mood (e.g., "Move file to..." instead of "Moves file to...").
- Limit the first line of the commit message to 72 characters or less.
- Reference relevant issues and pull requests liberally after the first line.

**Pull Request Description**:
The pull request description should provide a clear and concise overview of your changes. Please include the following sections:

- **Description**: A brief summary of the changes.
    - **What does this PR do?**: Explain the purpose and scope of the changes.
    - **Related Issue(s)**: Link to any relevant issues (e.g., `fixes #123`).
- **Changes**: Categorize the type of changes made.
    - `[ ] Bug fix`
    - `[ ] New feature`
    - `[ ] Documentation update`
    - `[ ] Other (please specify)`
- **Testing**: Describe how you tested these changes (e.g., unit tests, manual testing). Include any specific instructions for reviewers to verify the changes.
