#[cfg(test)]
    mod tests {
        use super::*;
        use crate::wallet::HyperWallet;
        use std::collections::HashMap;

        #[test]
        fn test_wallet_address_change() {
            let wallet = HyperWallet::new();
            let address = wallet.get_address();
            let mut dag = HyperDAG::new(&address, 10, 1);
            let mut utxos: HashMap<String, UTXO> = HashMap::new();

            // Create a block with the initial wallet
            let block = dag.create_candidate_block(&wallet.get_signing_key(), &Mempool::new(3600)).unwrap();
            assert_eq!(block.validator, address);
            assert!(dag.is_valid_block(&block, &utxos));

            // Change wallet address
            let new_wallet = HyperWallet::new();
            let new_address = new_wallet.get_address();
            dag.genesis_validator = new_address.clone();
            let new_block = dag.create_candidate_block(&new_wallet.get_signing_key(), &Mempool::new(3600)).unwrap();
            assert_eq!(new_block.validator, new_address);
            assert!(dag.is_valid_block(&new_block, &utxos));
        }
    }
